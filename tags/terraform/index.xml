
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
 <channel>
   <title>terraform on DevOps Nuke</title>
   <link>/tags/terraform/</link>
   <description>Recent content in terraform on DevOps Nuke</description>
   <generator>Hugo -- gohugo.io</generator>
   <language>en-us</language>
   <copyright>&amp;copy; 2022 - Nyukeit</copyright>
   <lastBuildDate>Thu, 24 Nov 2022 09:52:18 +0100</lastBuildDate>
   
       <atom:link href="/tags/terraform/index.xml" rel="self" type="application/rss+xml" />
   
   
     <item>
       <title>Building a Docker-Jenkins CI/CD Pipeline for a Python App (Part 2)</title>
       <link>/posts/docker-jenkins-ci-cd-pipeline-part2/</link>
       <pubDate>Tue, 29 Nov 2022 12:06:06 +0100</pubDate>
       
       <guid>/posts/docker-jenkins-ci-cd-pipeline-part2/</guid>
       <description>&lt;p&gt;This is a continuation of the tutorial for building a Docker Jenkins pipeline to deploy a simple Python app using Git and GitHub. The first part of the tutorial can be found &lt;a href=&#34;https://devopsnuke.netlify.app/posts/docker-jenkins-ci-cd-pipeline-part1/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&#34;installing-jenkins&#34;&gt;Installing Jenkins&lt;/h2&gt;&lt;p&gt;We now have the basics ready for deploying our app. Let&amp;rsquo;s install the remaining software to complete our pipeline.&lt;/p&gt;&lt;p&gt;We begin by importing the GPG key which will verify the integrity of the package.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo tee &lt;span style=&#34;color:#ae81ff&#34;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  /usr/share/keyrings/jenkins-keyring.asc &amp;gt; /dev/null&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, we add the Jenkins softwarey repository to the sources list and provide the authentication key.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo deb &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;signed-by&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/usr/share/keyrings/jenkins-keyring.asc&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  https://pkg.jenkins.io/debian-stable binary/ | sudo tee &lt;span style=&#34;color:#ae81ff&#34;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  /etc/apt/sources.list.d/jenkins.list &amp;gt; /dev/null&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt update&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/jenkins-install-keys.png&#34; alt=&#34;Jenkins Key and Source&#34;&gt;&lt;/p&gt;&lt;p&gt;Now, we install Jenkins&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install -y jenkins&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Wait till the entire installation process is over and you get back control of the terminal.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;/jenkins-install.png&#34; alt=&#34;Jenkins Installation&#34;&gt;&lt;/p&gt;&lt;p&gt;To verify if Jenkins was installed correctly, we will check if the Jenkins service is running.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo systemctl status jenkins.service&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/jenkins-verify-install.png&#34; alt=&#34;Jenkins Running&#34;&gt;&lt;/p&gt;&lt;p&gt;Press &lt;strong&gt;Q&lt;/strong&gt; to regain control.&lt;/p&gt;&lt;h2 id=&#34;jenkins-configuration&#34;&gt;Jenkins Configuration&lt;/h2&gt;&lt;p&gt;We have verified that the Jenkins service is now running. This means we can go ahead and configure it using our browser.&lt;/p&gt;&lt;p&gt;Open your browser and type this in the address bar:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;localhost:8080&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You should see the Unlock Jenkins page.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;/jenkins-unlock.png&#34; alt=&#34;Unlock Jenkins Page&#34;&gt;&lt;/p&gt;&lt;p&gt;Jenkins generated a default password when we installed it. To locate this password we will use the command:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo cat /var/lib/jenkins/secrets/initialAdminPassword&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/jenkins-initial-password.png&#34; alt=&#34;Jenkins Default Password&#34;&gt;&lt;/p&gt;&lt;p&gt;Copy this password and paste it into the box on the welcome page.&lt;/p&gt;&lt;p&gt;On the next page, select &amp;lsquo;Install Suggested plugins&amp;rsquo;&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;/jenkins-install-plugins.png&#34; alt=&#34;Jenkins Suggested Plugins&#34;&gt;&lt;/p&gt;&lt;p&gt;You should see Jenkins installing the plugins.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;/jenkins-plugins-installing.png&#34; alt=&#34;Jenkins Plugin Install&#34;&gt;&lt;/p&gt;&lt;p&gt;Once the installation has completed, click on Continue.&lt;/p&gt;&lt;p&gt;On the Create Admin User page, click &amp;lsquo;Skip and Continue as Admin&amp;rsquo;. You can alternatively create a separate Admin user, but be sure to add it to Docker group.&lt;/p&gt;&lt;p&gt;Click on &amp;lsquo;Save and Continue&amp;rsquo;&lt;/p&gt;&lt;p&gt;On the &lt;strong&gt;Instance Configuration&lt;/strong&gt; page, Jenkins will show the URL where it can be accessed. Leave it and click &amp;lsquo;Save and Finish&amp;rsquo;&lt;/p&gt;&lt;p&gt;Click on &amp;lsquo;Start Using Jenkins&amp;rsquo;. You will land on a welcome page like this:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;/jenkins-welcome.png&#34; alt=&#34;Jenkins Welcome&#34;&gt;&lt;/p&gt;&lt;p&gt;We have now successfully setup Jenkins. Let&amp;rsquo;s go back to the terminal to install Docker.&lt;/p&gt;&lt;h2 id=&#34;installing-docker&#34;&gt;Installing Docker&lt;/h2&gt;&lt;p&gt;First we need to uninstall any previous Docker stuff, if any.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get remove docker docker-engine docker.io containerd runc&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Most likely, nothing will be removed since we are working with a fresh install of Ubuntu.&lt;/p&gt;&lt;p&gt;We will use the command line to install Docker.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install &lt;span style=&#34;color:#ae81ff&#34;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    ca-certificates &lt;span style=&#34;color:#ae81ff&#34;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    curl &lt;span style=&#34;color:#ae81ff&#34;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    gnupg &lt;span style=&#34;color:#ae81ff&#34;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    lsb-release&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/docker-install-prereqs.png&#34; alt=&#34;Docker Prerequisites&#34;&gt;&lt;/p&gt;&lt;p&gt;Next, we will add Docker&amp;rsquo;s GPG key, just like we did with Jenkins.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo mkdir -p /etc/apt/keyrings&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, we will setup the repository&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#ae81ff&#34;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;deb [arch=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;dpkg --print-architecture&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;lsb_release -cs&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; stable&amp;#34;&lt;/span&gt; | sudo tee /etc/apt/sources.list.d/docker.list &amp;gt; /dev/null&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next we will install the Docker Engine.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get update&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/docker-install.png&#34; alt=&#34;Docker Installation&#34;&gt;&lt;/p&gt;&lt;p&gt;Now verify the installation by typing&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker version&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/docker-verify-client.png&#34; alt=&#34;Docker Verify Client&#34;&gt;&lt;/p&gt;&lt;p&gt;Notice that you will get an error for permission denied while connecting to Docker daemon socket. This is because it requires a root user. This means you would need to prefix sudo every time you want to run Docker commands. This is not ideal. We can fix this by making a docker group.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo groupadd docker&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The docker group may already exist. Now let&amp;rsquo;s add the user to this group.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo usermod -aG docker $USER&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Apply changes to Unix groups by typing the following:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;newgrp docker&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;&lt;p&gt;Note: If you are following this tutorial on a VM, you may need to restart your instance for changes to take effect.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Let&amp;rsquo;s verify that we can now connect to the Docker Engine.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker version&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/docker-verify-socket.png&#34; alt=&#34;Docker Engine Version&#34;&gt;&lt;/p&gt;&lt;p&gt;As we can see, Docker is now fully functional with a connection to the Docker Engine.&lt;/p&gt;&lt;p&gt;We will now create the Dockerfile that will build the Docker image.&lt;/p&gt;&lt;h2 id=&#34;creating-the-dockerfile&#34;&gt;Creating the Dockerfile&lt;/h2&gt;&lt;p&gt;Inside your terminal, within your folder, create the Dockerfile using the nano editor.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo nano Dockerfile&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Type this text inside the editor:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FROM python:3.8&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WORKDIR /src&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;COPY . /src&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;RUN pip install flask&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;RUN pip install flask_restful&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;EXPOSE &lt;span style=&#34;color:#ae81ff&#34;&gt;3333&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ENTRYPOINT &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;python&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CMD &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./src/helloworld.py&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;building-the-docker-image&#34;&gt;Building the Docker Image&lt;/h2&gt;&lt;p&gt;From the Dockerfile, we will now build a Docker image.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker build -t helloworldpython .&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/docker-build.png&#34; alt=&#34;Docker Build&#34;&gt;&lt;/p&gt;&lt;p&gt;Now let&amp;rsquo;s create a test container and run it a browser to check if our app is displaying correctly.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run -p 3333:3333 helloworldpython&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Open your browser and go to &lt;code&gt;localhost:3333&lt;/code&gt; to see our python app in action.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;/python-app-browser.png&#34; alt=&#34;Docker Run Prints Hello World&#34;&gt;&lt;/p&gt;&lt;p&gt;Now let&amp;rsquo;s see how we can automate this printing every time we make a change to our python code.&lt;/p&gt;&lt;h2 id=&#34;creating-the-jenkinsfile&#34;&gt;Creating the Jenkinsfile&lt;/h2&gt;&lt;p&gt;We will create a Jenkinsfile which will elaborate a step-by-step process of building the image from the Dockerfile, pushing it to the registry, pulling it back from the registry and running it as a container.&lt;/p&gt;&lt;p&gt;Every change pushed to the GitHub repository will trigger this chain of events.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo nano Jenkinsfile&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the nano editor, we will use the following code as our Jenkinsfile.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;node &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;def application &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pythonapp&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;def dockerhubaccountid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nyukeit&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stage&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Clone repository&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;checkout scm&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stage&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Build image&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;app &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; docker.build&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;dockerhubaccountid&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;application&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;BUILD_NUMBER&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stage&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Push image&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;withDockerRegistry&lt;span style=&#34;color:#f92672&#34;&gt;([&lt;/span&gt; credentialsId: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dockerHub&amp;#34;&lt;/span&gt;, url: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;])&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;app.push&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;app.push&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;latest&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stage&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Deploy&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sh &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;docker run -d -p 3333:3333 &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;dockerhubaccountid&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;application&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;BUILD_NUMBER&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stage&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Remove old images&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// remove old docker images&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sh&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;docker rmi &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;dockerhubaccountid&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;application&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:latest -f&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;explaining-the-jenkinsfile&#34;&gt;Explaining the Jenkinsfile&lt;/h2&gt;&lt;p&gt;Our Jenkins pipeline is divided in 5 stages as you can see from the code.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Stage 1 - Clones our Github repo&lt;/li&gt;&lt;li&gt;Stage 2 - Builds our Docker image from the Docker File&lt;/li&gt;&lt;li&gt;Stage 3 - Pushes the image to Docker Hub&lt;/li&gt;&lt;li&gt;Stage 4 - Deploys the image as a container by pulling it from Docker Hub&lt;/li&gt;&lt;li&gt;Stage 5 - Removes the old image to stop image pile up.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Now that our Jenkinsfile is ready, let&amp;rsquo;s push all of our source code to GitHub.&lt;/p&gt;&lt;h2 id=&#34;pushing-files-to-github&#34;&gt;Pushing files to GitHub&lt;/h2&gt;&lt;p&gt;First, let&amp;rsquo;s check the status of our local repo.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git status&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/git-status-untracked.png&#34; alt=&#34;Git Status&#34;&gt;&lt;/p&gt;&lt;p&gt;As we can see, there are no commits yet and there are untracked files and folders. Let&amp;rsquo;s tell Git to track them so we can push them to our remote repo.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git add *&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will add all the files present in the git scope.&lt;/p&gt;&lt;p&gt;Git is now tracking our files and they are ready to be commit. The commit function pushes the files to the staging area where they will be ready to be pushed.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;First push of the python app&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/git-commit-first.png&#34; alt=&#34;Git Commit&#34;&gt;&lt;/p&gt;&lt;p&gt;Now, it&amp;rsquo;s time to push our files.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push -u origin main&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s go to our repo on GitHub to verify that our push was successful.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;/github-verify-first-push.png&#34; alt=&#34;GitHub Files pushed&#34;&gt;&lt;/p&gt;&lt;h2 id=&#34;creating-jenkins-credentials&#34;&gt;Creating Jenkins Credentials&lt;/h2&gt;&lt;p&gt;In the Jenkins dashboard, go to &lt;strong&gt;Manage Jenkins&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;/jenkins-new-item.png&#34; alt=&#34;Manage Jenkins&#34;&gt;&lt;/p&gt;&lt;p&gt;In the Security section, go to &lt;strong&gt;Manage Credentials&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;/jenkins-manage-credentials.png&#34; alt=&#34;Manage Credentials&#34;&gt;&lt;/p&gt;&lt;p&gt;In the credentials section, click on &lt;strong&gt;System&lt;/strong&gt;. On the page that opens, click on &lt;strong&gt;Global Credentials Unrestricted&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;/jenkins-creds-system.png&#34; alt=&#34;Jenkins Creds System&#34;&gt;&lt;img src=&#34;/jenkins-creds-system-global.png&#34; alt=&#34;Jenkins Creds Global&#34;&gt;&lt;/p&gt;&lt;p&gt;Now click on &lt;strong&gt;Add Credentials&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;Keep &amp;lsquo;Kind&amp;rsquo; as &amp;lsquo;Username and Password&amp;rsquo;&lt;/p&gt;&lt;p&gt;In &amp;lsquo;username&amp;rsquo; type your Docker Hub username.&lt;/p&gt;&lt;p&gt;In &amp;lsquo;password&amp;rsquo; type your Docker Hub password.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Note: If you have enabled 2FA in your Docker Hub account, you need to create an access token and use it as a password here.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;In &amp;lsquo;ID&amp;rsquo;, type &amp;lsquo;dockerHub&amp;rsquo;&lt;/p&gt;&lt;p&gt;Finally, click on &lt;strong&gt;Create&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;/jenkins-credentials-form.png&#34; alt=&#34;Docker Credentials in Jenkins&#34;&gt;&lt;/p&gt;&lt;h2 id=&#34;creating-a-jenkins-job&#34;&gt;Creating a Jenkins Job&lt;/h2&gt;&lt;p&gt;To close our pipeline, we will create a Jenkins job which will be triggered when there are changes to our GitHub repo.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Note: In Jenkins, if not already installed, install the plugins Docker and Docker Pipeline. Restart your Jenkins instance after installation.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Click on &lt;strong&gt;New Item&lt;/strong&gt; in your Jenkins dashboard. Enter any name you like. Select &lt;strong&gt;Pipeline&lt;/strong&gt; and click okay.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;/jenkins-python-project.png&#34; alt=&#34;Jenkins New Project&#34;&gt;&lt;/p&gt;&lt;p&gt;In the configuration page, type in any description that you want.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;/jenkins-project-config-1.png&#34; alt=&#34;Jenkins Config 1&#34;&gt;&lt;/p&gt;&lt;p&gt;In &amp;lsquo;Build Triggers&amp;rsquo; select &lt;strong&gt;Poll SCM&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;/jenkins-poll-scm-and-schedule.png&#34; alt=&#34;Jenkins Poll SCM and Schedule&#34;&gt;&lt;/p&gt;&lt;p&gt;In &amp;lsquo;Schedule&amp;rsquo;, type &lt;code&gt;* * * * *&lt;/code&gt; (with spaces in between. This will poll our GitHub repo every minute to check if there any changes. This is mostly too quick for any project, but we are just testing our code.&lt;/p&gt;&lt;p&gt;In the &amp;lsquo;Pipeline&amp;rsquo; section, in &amp;lsquo;definition&amp;rsquo; select &lt;strong&gt;Pipeline Script from SCM&lt;/strong&gt;. This will look for the Jenkinsfile that we uploaded to our repo in GitHub and apply it.&lt;/p&gt;&lt;p&gt;Next, in SCM in the Repositories section, copy and paste your GitHub repo &lt;strong&gt;HTTPS URL&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;/jenkins-pipeline-poll-scm.png&#34; alt=&#34;Jenkins SCM Config&#34;&gt;&lt;/p&gt;&lt;p&gt;In &amp;lsquo;Branches to Build&amp;rsquo;, by default, it will have master. Change it to main, since our branch is called main.&lt;/p&gt;&lt;p&gt;Make sure the &amp;lsquo;Script Path&amp;rsquo; has &amp;lsquo;Jenkinsfile&amp;rsquo; already populated. If not, you can type it out.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;/jenkins-project-config-scm-branch.png&#34; alt=&#34;Jenkins SCM Branch&#34;&gt;&lt;/p&gt;&lt;p&gt;Click on &lt;strong&gt;Save&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;Now our Jenkins job is created. It is time to see the whole pipeline in action.&lt;/p&gt;&lt;p&gt;Click on &amp;lsquo;Build Now&amp;rsquo;. This will trigger all the steps and if we have all the configurations correct, it should have our container running with the python app and our custom image uploaded on Docker Hub. Let&amp;rsquo;s verify this.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;/jenkins-console-output.png&#34; alt=&#34;Jenkins Console Output&#34;&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;/docker-hub-image-verify.png&#34; alt=&#34;Docker Hub Image visible&#34;&gt;&lt;/p&gt;&lt;p&gt;As we can see, our custom built image is now available in our Docker Hub account.&lt;/p&gt;&lt;p&gt;Now let&amp;rsquo;s verify if the container is running.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker ps&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;committing-changes-to-python-app&#34;&gt;Committing changes to Python App&lt;/h2&gt;&lt;p&gt;To see the full automated flow in action, let&amp;rsquo;s change the python app a bit and go back to our browser to see the changes being reflected automatically.&lt;/p&gt;&lt;p&gt;We have changed the output text from &lt;em&gt;Hello World!&lt;/em&gt; to &lt;em&gt;Hello World! I am learning DevOps!&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Save the file and push the file to GitHub.&lt;/p&gt;&lt;p&gt;As we can see, this action triggered an automatic job creation on Jenkins, which resulted in Build No. 2 of our app.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;/jenkins-build-auto-trigger.png&#34; alt=&#34;Jenkins Build 2 - Auto Trigger&#34;&gt;&lt;/p&gt;&lt;p&gt;We can now see that our app has 2 builds. In the first build, we can see &amp;rsquo;no changes&amp;rsquo; because we manually triggered the first build after creating our repository. All subsequent commits will result in a new build.&lt;/p&gt;&lt;p&gt;We can see that Build No 2 mentions there was 1 commit.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;/jenkins-build-2-success.png&#34; alt=&#34;Jenkins Build 2&#34;&gt;&lt;/p&gt;&lt;p&gt;As for our webapp, the message displayed has now changed.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;/python-app-browser-v2.png&#34; alt=&#34;Hello World Changed&#34;&gt;&lt;/p&gt;&lt;p&gt;This is how we can create a Docker-Jenkins automation.&lt;/p&gt;&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://www.jenkins.io/doc/book/installing/linux/#debianubuntu&#34;&gt;Installing Jenkins&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/engine/install/ubuntu/&#34;&gt;Installing Docker on Ubuntu&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://www.digitalocean.com/community/questions/how-to-fix-docker-got-permission-denied-while-trying-to-connect-to-the-docker-daemon-socket&#34;&gt;Fix Docker Socket Permission Denied&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://runnable.com/docker/python/dockerize-your-python-application&#34;&gt;Dockerize your Python Application&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://www.section.io/engineering-education/how-to-containerize-a-python-application/&#34;&gt;Containerize A Python Application&lt;/a&gt;&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Building a Docker-Jenkins CI/CD Pipeline for a Python App (Part 1)</title>
       <link>/posts/docker-jenkins-ci-cd-pipeline-part1/</link>
       <pubDate>Tue, 29 Nov 2022 09:15:20 +0100</pubDate>
       
       <guid>/posts/docker-jenkins-ci-cd-pipeline-part1/</guid>
       <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&lt;p&gt;In this article, we will look at how we can deploy an app using a CI/CD pipeline involving git, GitHub, Jenkins, Docker and DockerHub. The basic premise is that when a code update is pushed to git, it will get updated on GitHub. Jenkins will then pull this update, build the Docker Image from a Dockerfile and Jenkinsfile configuration, push it to Docker Hub as a registry store, and then pull it and run it as a container to deploy our app.&lt;/p&gt;&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;We will use a Python app for this tutorial. The sample app will be included in the GitHub repo.&lt;/li&gt;&lt;li&gt;GitHub account to sync our local repo and connect with Jenkins.&lt;/li&gt;&lt;li&gt;Docker Hub account. If you do not already have one, you can create it at hub.docker.com&lt;/li&gt;&lt;/ol&gt;&lt;blockquote&gt;&lt;p&gt;This article uses Ubuntu 16.04 Bionic Beaver. You can achieve all the steps mentioned here using Vagrant and VirtualBox. You can follow the tutorial here.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&#34;installingupdating-java&#34;&gt;Installing/Updating Java&lt;/h2&gt;&lt;p&gt;First we will check if Java is installed and what version is it.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;java -version&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/java-version-p2.png&#34; alt=&#34;Java Not Installed&#34;&gt;&lt;/p&gt;&lt;p&gt;As you can see, it shows Java is not installed.&lt;/p&gt;&lt;p&gt;Since Jenkins will require Java 11, we will go ahead install it using the official documentation of Jenkins.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install -y openjdk-11-jre&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/java-install-p2.png&#34; alt=&#34;Java Installation&#34;&gt;&lt;/p&gt;&lt;p&gt;Once the installation is complete, you can now check and verify the java version again.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;java -version&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/java-version-p2-installed.png&#34; alt=&#34;Java Installed Version&#34;&gt;&lt;/p&gt;&lt;p&gt;As we can see, Java is now successfully installed with version 11.0.17.&lt;/p&gt;&lt;p&gt;Now, let&amp;rsquo;s install Git.&lt;/p&gt;&lt;h2 id=&#34;installing-git&#34;&gt;Installing Git&lt;/h2&gt;&lt;p&gt;Git will help us in maintaining and versioning our code in an efficient manner.&lt;/p&gt;&lt;p&gt;First let us check if Git is already available in our system or not.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git --version&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/git-version.png&#34; alt=&#34;Git Version&#34;&gt;&lt;/p&gt;&lt;p&gt;As we can see, Git was already installed on the system with the version 2.17.1. If you still do not have it installed, you can install it using this command:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install -y git&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;configuring-git-local-repo&#34;&gt;Configuring Git (Local Repo)&lt;/h2&gt;&lt;p&gt;Let&amp;rsquo;s first create a folder for our project. We will be working inside this folder throughout the tutorial.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir pythonapp&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We will initialize our local Git repository inside this folder.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd pythonapp&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But before we initialize our local repository, we need to make some changes to the default Git configuration.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git config --global init.defaultBranch main&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;By default, Git uses &amp;lsquo;master&amp;rsquo; as the default branch. However, GitHub and most developers like to use &amp;lsquo;main&amp;rsquo; as the default branch.&lt;/p&gt;&lt;p&gt;Further, we will also configure our name and email ID for Git.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git config --global user.name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;your_name&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git config --global user.email &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;your@email.com&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To verify your modifications to the Git configuration, you can use this command:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git config --list&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/git-config-list.png&#34; alt=&#34;Git Config List&#34;&gt;&lt;/p&gt;&lt;p&gt;Now it&amp;rsquo;s time to initialize our local repository.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git init&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/git-init.png&#34; alt=&#34;Git Init&#34;&gt;&lt;/p&gt;&lt;p&gt;This will create an empty repository in the folder. You can also alternatively create a repository on GitHub first and then clone it to your local system.&lt;/p&gt;&lt;h2 id=&#34;setting-up-github-remote-repo&#34;&gt;Setting up GitHub (Remote Repo)&lt;/h2&gt;&lt;p&gt;Our local Git repository is not setup and initialized. We will now create a remote repo on GitHub to sync with local.&lt;/p&gt;&lt;p&gt;Login to your GitHub account and click on your Profile picture. Click on &amp;lsquo;Your Repositories&amp;rsquo;.&lt;/p&gt;&lt;p&gt;On the page that opens, click on the green &amp;lsquo;New&amp;rsquo; button.&lt;/p&gt;&lt;p&gt;Let&amp;rsquo;s name our repo &amp;lsquo;pythonapp&amp;rsquo; to keep it same as our folder name. This is not necessary but it will keep things simpler.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;/github-create-repo.png&#34; alt=&#34;Github Create Repo&#34;&gt;&lt;/p&gt;&lt;p&gt;Keep the repository as &amp;lsquo;Public&amp;rsquo; and click on &amp;lsquo;Create Repository&amp;rsquo;&lt;/p&gt;&lt;h2 id=&#34;connecting-to-github&#34;&gt;Connecting to GitHub&lt;/h2&gt;&lt;p&gt;For this tutorial, we will use SSH to connect the local repo to our remote repo. Please note that GitHub has stopped allowing username/password combinations for connections. If you wish to use https instead, you can check out &lt;a href=&#34;https://www.edgoad.com/2021/02/using-personal-access-tokens-with-git-and-github.html&#34;&gt;this&lt;/a&gt; tutorial to connect using Personal Access Tokens.&lt;/p&gt;&lt;p&gt;First we will create an SSH key in our Ubuntu system.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh-keygen&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Press &amp;rsquo;enter&amp;rsquo; three times without typing anything.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;/ssh-keygen.png&#34; alt=&#34;SSH Keygen&#34;&gt;&lt;/p&gt;&lt;p&gt;This will create an SSH key in your system. We will use this key in our GitHub account. To access the key, use this command&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat ~/.ssh/id_rsa.pub&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Copy the entire key.&lt;/p&gt;&lt;p&gt;On GitHub, go to your repository and click on &amp;lsquo;Settings&amp;rsquo;.&lt;/p&gt;&lt;p&gt;On the left, in the &amp;lsquo;Security&amp;rsquo; section, click on &amp;lsquo;Deploy Keys&amp;rsquo;.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;/github-ssh-keys.png&#34; alt=&#34;Deploy Keys&#34;&gt;&lt;/p&gt;&lt;p&gt;Name the key to whatever you wish. Paste the key that you copied from the terminal inside the &amp;lsquo;Key&amp;rsquo; box. Be sure to tick the &amp;lsquo;Allow Write Access&amp;rsquo; box.&lt;/p&gt;&lt;p&gt;Now click on &amp;lsquo;Add Key&amp;rsquo;. We now have access to push to our remote repo using SSH.&lt;/p&gt;&lt;p&gt;Now we will add the remote that will allow us to perform operations to the remote repo.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git remote add origin git@github.com:nyukeit/pythonapp.git&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To verify your remote&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git remote&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/git-verify-remote.png&#34; alt=&#34;Git Remote&#34;&gt;&lt;/p&gt;&lt;p&gt;To verify and connect our configuration, we will do&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh -T git@github.com&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When prompted, type &amp;lsquo;yes&amp;rsquo;. You should see a message that says &amp;lsquo;You have successfullly authenticated, but GitHub does not provide shell access.&amp;rsquo;&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;/github-verify-ssh-conn.png&#34; alt=&#34;Github SSH Success&#34;&gt;&lt;/p&gt;&lt;h2 id=&#34;python-app&#34;&gt;Python App&lt;/h2&gt;&lt;p&gt;Let&amp;rsquo;s create Python app that will display Hello World! in the browser when executed.&lt;/p&gt;&lt;p&gt;Inside your terminal, make sure you are in the project folder. Create a folder named &amp;lsquo;src&amp;rsquo; and create a file name &amp;lsquo;helloworld.py&amp;rsquo; inside this folder like this:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir src&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd src&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo nano helloworld.py&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now let&amp;rsquo;s write a Python script! Inside the nano editor, type this:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; flask &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Flask, request&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; flask_restful &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Resource, Api&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;app &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Flask(__name__)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;api &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Api(app)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Greeting&lt;/span&gt; (Resource):&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(self):&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;api&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add_resource(Greeting, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# Route_1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    app&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0.0.0.0&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;3333&amp;#39;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Press &lt;strong&gt;ctrl + x + y&lt;/strong&gt; to save the file.&lt;/p&gt;&lt;p&gt;Head over to Part 2 where we will go through the installation &amp;amp; configuration of Jenkins, Docker and creating the scripts to finish our pipeline.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Provisioning an EC2 instance using Terraform &amp; keypair</title>
       <link>/posts/ec2-terraform-keypair-linux/</link>
       <pubDate>Thu, 24 Nov 2022 09:52:18 +0100</pubDate>
       
       <guid>/posts/ec2-terraform-keypair-linux/</guid>
       <description>&lt;p&gt;&amp;ndash; Image Credit: HashiCorp&lt;/p&gt;&lt;p&gt;This is a tutorial of the project &amp;ldquo;Provisioning an EC2 Instance using Terraform&amp;rdquo;. The goals of the project are to have an EC2 instance created using Terraform scripts and then SSH into the instance to install Java, Python and Jenkins.&lt;/p&gt;&lt;h2 id=&#34;install-terraform&#34;&gt;Install Terraform&lt;/h2&gt;&lt;p&gt;To begin with, we first need to install gnupg and software-properties-common, if not already present. This step follows the instructions mentioned in the official Terraform documentation.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get update&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install -y gnupg software-properties-common&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After installing these, we need to add the HashiCorp GPG Key to the Ubuntu system.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget -O- https://apt.releases.hashicorp.com/gpg | &lt;span style=&#34;color:#ae81ff&#34;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;gpg --dearmor | &lt;span style=&#34;color:#ae81ff&#34;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, let&amp;rsquo;s go ahead and add the HashiCorp repository to Ubuntu. This repository will allow us to find the Terraform software on the internet.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;https://apt.releases.hashicorp.com &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;lsb_release -cs&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; main&amp;#34;&lt;/span&gt; | &lt;span style=&#34;color:#ae81ff&#34;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;sudo tee /etc/apt/sources.list.d/hashicorp.list&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And finally, it&amp;rsquo;s time to install Terraform itself.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get update&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install terraform&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After completion, I verified if the installation was successful using this command:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;terraform --version&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/terraform-version.png&#34; alt=&#34;Terraform Version&#34;&gt;&lt;/p&gt;&lt;p&gt;Now that Terraform is installed, it was time to install AWSCLI, the utility to configure our AWS with credentials.&lt;/p&gt;&lt;h2 id=&#34;install-awscli&#34;&gt;Install AWSCLI&lt;/h2&gt;&lt;p&gt;Although there are a few ways to install AWSCLI, I used the method prescribed in the official documentation by Amazon.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip&amp;#34;&lt;/span&gt; -o &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;awscliv2.zip&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;unzip awscliv2.zip&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo ./aws/install&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once again, I verified the successfull installation of AWSLI by checking its version by typing in the following command:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aws --version&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/aws-version.png&#34; alt=&#34;AWS Version&#34;&gt;&lt;/p&gt;&lt;h2 id=&#34;aws-credentials&#34;&gt;AWS Credentials&lt;/h2&gt;&lt;p&gt;I already had an AWS account created, by means of the Simplilearn Portal, along with an access token already available in the portal.&lt;/p&gt;&lt;p&gt;Now in the terminal, we type the following command&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aws configure&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/aws-configure.png&#34; alt=&#34;AWS Configure&#34;&gt;&lt;/p&gt;&lt;p&gt;AWS presents us with options to paste/type the following one by one. Press enter after pasting in each line. Note that [none] means there is no data configured for that key yet.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Access Key &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;none&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;paste access key here&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Secret Key &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;none&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;paste secrete key here&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Region &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;none&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: us-east-1&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Output format &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;none&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: &amp;lt;leave this blank&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we have our AWSCLI configured to access the AWS account, however, this is not enough to launch an EC2 instance. For that, we need a keypair.&lt;/p&gt;&lt;p&gt;Sidenote: This article makes use of the root account in AWS and does not consider any security viewpoint. Creating an IAM user account and using permission boundaries is generally suggested.&lt;/p&gt;&lt;p&gt;Again, we confirm everything is in place by verifying. Seeing is believing.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd /.aws&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat credentials&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/verifyaws-credentials.png&#34; alt=&#34;Verify AWS Credentials&#34;&gt;&lt;/p&gt;&lt;h2 id=&#34;ec2-keypair&#34;&gt;EC2 Keypair&lt;/h2&gt;&lt;p&gt;In AWS dashboard, go to EC2 and on the left navigation, go to Keypair. Click on Create.&lt;/p&gt;&lt;p&gt;Give a suitable name to the keypair file and select RSA and PEM and click on Save. This will download the PEM file to the system.&lt;/p&gt;&lt;p&gt;In terminal, I created a folder for my project called &amp;rsquo;ec2tf&#39;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir ec2tf&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I wasn&amp;rsquo;t able to move the downloaded PEM file to the lab system directly. So I created the PEM file inside the terminal and pasted the contents of the downloaded file.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo nano ec2tf.pem&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we will change the permissions of this key file, without which EC2 will reject our connection.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo chmod &lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt; ec2tf.pem&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We will use this keypair file to ssh into the newly created EC2 Instance.&lt;/p&gt;&lt;h2 id=&#34;creating-terraform-scripts&#34;&gt;Creating Terraform Scripts&lt;/h2&gt;&lt;p&gt;Now that we have the prerequisites in place, let&amp;rsquo;s create a Terraform plan and apply it to create our instance.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd myproject&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once inside your the folder, I created the Terraform creds file which will contain the same credentials that we used for AWSCLI&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo nano creds.tf&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;provider &amp;#34;aws&amp;#34; {&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;access_key = &amp;#34;&amp;lt;your aws access key&amp;gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;secret_key = &amp;#34;&amp;lt;your aws secret key&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;region = &amp;#34;&amp;lt;your aws region&amp;gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now it&amp;rsquo;s time to create the main Terraform script that will actually execute the commands to launch our EC2 instance.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo nano main.tf&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;resource &amp;#34;aws_instance&amp;#34; &amp;#34;myproject&amp;#34; {&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;ami = &amp;#34;ami-2757f631&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;instance_type = &amp;#34;t2.micro&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;key_name = &amp;#34;ec2tf&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;NOTE: I tried searching for other Amazon Machine Images (AMI) that corresponded to the type T2.Micro but I wasn&amp;rsquo;t able to. Hence, I went ahead using the AMI ID mentioned in the Projects documentation downloaded from the portal for Course 2.&lt;/p&gt;&lt;p&gt;We now have the Terraform plan ready and we need to initiate it.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;terraform init&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/terraform-init.png&#34; alt=&#34;Terraform Initialization&#34;&gt;&lt;/p&gt;&lt;p&gt;Once the configuration is initialized, we need to apply it for Terraform to create our EC2 instance.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;terraform apply&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/tf-ec2-creation.png&#34; alt=&#34;Terraform Apply&#34;&gt;&lt;/p&gt;&lt;p&gt;When prompted, type &lt;strong&gt;yes&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Terraform will now begin to create the EC2 instance. This took up to a minute and a half to finish depending on the image.&lt;/p&gt;&lt;p&gt;To verify the creation of the instance, I went to my EC2 dashboard and I could see my newly created instance in the running state.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;/verify-ec2-instance-aws.png&#34; alt=&#34;EC2 Instance Running&#34;&gt;&lt;/p&gt;&lt;h2 id=&#34;connecting-to-ec2-instance-using-ssh&#34;&gt;Connecting to EC2 Instance using SSH&lt;/h2&gt;&lt;p&gt;The reason why I initiated my instance using a keypair file was to be able to SSH into it after creation. And we will see how this became very easy now.&lt;/p&gt;&lt;p&gt;The first step is to go to the EC2 dashboard and click on &lt;strong&gt;Security Groups&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;There, select the security group and click on &lt;strong&gt;Inbound Rules&lt;/strong&gt; tab. Click on Edit Inbound Rules&lt;/p&gt;&lt;p&gt;There was a default rule already added.&lt;/p&gt;&lt;p&gt;Click on &lt;strong&gt;Add Rule&lt;/strong&gt; and select the protocol as &lt;strong&gt;SSH&lt;/strong&gt; and source as &lt;strong&gt;Custom&lt;/strong&gt;. Click on the search box next to Custom and select &lt;strong&gt;0.0.0.0/0&lt;/strong&gt; and save the rule.&lt;/p&gt;&lt;p&gt;My EC2 instance was now ready to accept incoming SSH connections.&lt;/p&gt;&lt;p&gt;Before moving ahead, I needed the public IPv4 DNS address of my instance. I found this be going to Instances in the EC2 dashboard and selecting my running instance.&lt;/p&gt;&lt;p&gt;Now to login to the EC2 instance, we type the following&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo ssh -i &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ec2tf.pem&amp;#34;&lt;/span&gt; ubuntu@ip4-public-dns&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note: I found that Amazon AWS has default usernames for AMIs based on the type of image which can be found on &lt;a href=&#34;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/connection-prereqs.html&#34;&gt;here&lt;/a&gt;&lt;/p&gt;&lt;p&gt;When prompted, type &lt;strong&gt;yes&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;/ssh-ec2-instance.png&#34; alt=&#34;Succesfull Connection to EC2&#34;&gt;&lt;/p&gt;&lt;p&gt;With this, I successfully logged in to my new EC2 instance using SSH. Now it was time to install Java, Python and Jenkins.&lt;/p&gt;&lt;h2 id=&#34;installing-java&#34;&gt;Installing Java&lt;/h2&gt;&lt;p&gt;The step that I had thought was the most straightforward actually turned up a small challenge. Jenkins requires Java to run, so I had to install java first. The official documentation of Jenkins mentions installing openjdk-11-jre but I could not come around to install this.&lt;/p&gt;&lt;p&gt;Trying the other method of installing default-jre was installing an older version of Java which was incompatible with Jenkins.&lt;/p&gt;&lt;p&gt;Thus, I had to search for a PPA to work around this.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo add-apt-repository ppa:openjdk-r/ppa&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get update&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt install openjdk-11-jdk&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, we verify the java version installed.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;java -version&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/java-version.png&#34; alt=&#34;Verifying Java Version&#34;&gt;&lt;/p&gt;&lt;h2 id=&#34;installing-python&#34;&gt;Installing Python&lt;/h2&gt;&lt;p&gt;Python comes pre-installed in Ubuntu 16.04, so I had to only upgrade it from the current version to the latest version. This was checked using&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python3 --version&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/python-version.png&#34; alt=&#34;Python Version&#34;&gt;&lt;/p&gt;&lt;p&gt;To upgrade, I used the apt package manager.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt upgrade python3&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And finally, it was time to install Jenkins.&lt;/p&gt;&lt;h2 id=&#34;installing-jenkins&#34;&gt;Installing Jenkins&lt;/h2&gt;&lt;p&gt;Since we already installed Java, we can now proceed to installing Jenkins. We first add the key and repository to fetch the Jenkins installer.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo tee &lt;span style=&#34;color:#ae81ff&#34;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  /usr/share/keyrings/jenkins-keyring.asc &amp;gt; /dev/null&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo deb https://pkg.jenkins.io/debian-stable binary/ | sudo tee /etc/apt/sources.list.d/jenkins.list&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/add-jenkins-keys.png&#34; alt=&#34;Jenkins Keys&#34;&gt;&lt;/p&gt;&lt;p&gt;Now we update the repository list.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get update&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And finally, installing Jenkins.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install jenkins&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/install-jenkins.png&#34; alt=&#34;Installing Jenkins&#34;&gt;&lt;/p&gt;&lt;p&gt;Once Jenkins is installed, we verify the installation using&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo systemctl status jenkins.service&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/verify-jenkins.png&#34; alt=&#34;Verify Jenkins Service Running&#34;&gt;&lt;/p&gt;&lt;p&gt;With this, the project was successfully completed.&lt;/p&gt;&lt;h2 id=&#34;challenges&#34;&gt;Challenges&lt;/h2&gt;&lt;p&gt;Since this was my first DevOps project and it was mentioned that we have not sufficiently covered all the topics in the lecture required to complete this project, there were a few challenges that needed to be conquered.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Initially, I managed to create an EC2 instance using Terraform but did not create a keypair first. Although an existing EC2 instance can be configured with a new keypair, the process is rather advanced and tedious. So I had to delete the instance and start over again.&lt;/li&gt;&lt;li&gt;Finding out an Amazon Machine Image ID was not straightforward. After spending a lot of time searching for a suitable AMI, I had to go back to the project documentation and use the AMI mentioned in it.&lt;/li&gt;&lt;li&gt;SSH into the new instance posed a few bottlenecks including connection timed out errors. This was finally solved by adding the inbound SSH connection rules in the Security Groups. Even then, I had to use sudo to successfully SSH into the instance.&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;&lt;p&gt;I got help from a lot of discussions and tutorials from the internet as linked below, in addition to the project documentation provided by Simplilearn.&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/connection-prereqs.html&#34;&gt;AWS EC2 User Guides - Connection Prerequisites&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AccessingInstancesLinux.html#AccessingInstancesLinuxSSHClient&#34;&gt;AWS EC2 User Guides - Accessing Instances using SSH&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://ifritltd.com/2017/12/06/provisioning-ec2-key-pairs-with-terraform/&#34;&gt;Provisioning EC2 Keypairs with Terraform&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://www.techtarget.com/searchcloudcomputing/tip/How-to-launch-an-EC2-instance-using-Terraform&#34;&gt;How To Launch An EC2 Instance Using Terraform&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://medium.com/tensult/unable-to-connect-your-ec2-instance-using-ssh-842f6f6f0d04&#34;&gt;Unable to Connect to Your EC2 Instance Using SSH&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-install-jenkins-on-ubuntu-16-04&#34;&gt;How to Install Jenkins on Ubuntu 16.04&lt;/a&gt;&lt;/p&gt;</description>
     </item>
   
 </channel>
</rss>
